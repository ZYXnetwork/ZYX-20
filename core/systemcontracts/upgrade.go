package systemcontracts

import (
	"encoding/hex"
	"fmt"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
)


type UpgradeConfig struct {
	BeforeUpgrade upgradeHook
	AfterUpgrade  upgradeHook
	ContractAddr  common.Address
	CommitUrl     string
	Code          string
}

type Upgrade struct {
	UpgradeName string
	Configs     []*UpgradeConfig
}

type upgradeHook func(blockNumber *big.Int, contractAddr common.Address, statedb *state.StateDB) error

const (
	mainNet    = "Mainnet"
	minervaNet = "Minerva"
	defaultNet = "Default"
)

var (
	GenesisHash common.Hash
	//upgrade config
	releaseUpgrade = make(map[string]*Upgrade)
)

func init() {
	releaseUpgrade[mainNet] = &Upgrade{
		UpgradeName: "release",
		Configs: []*UpgradeConfig{
			{
				ContractAddr: common.HexToAddress(TeamLock),
				Code:         "608060405234801561001057600080fd5b50600436106100a95760003560e01c80638b9abfa6116100715780638b9abfa61461011b578063a78abc1614610123578063c81b16621461013f578063e1c7392a14610147578063f4dadc611461014f578063f9a2bbc71461018c576100a9565b80631d5edcf0146100ae57806339a366ba146100d257806356891412146100ec5780637e818976146100f45780638920f2c4146100fc575b600080fd5b6100b6610194565b604080516001600160a01b039092168252519081900360200190f35b6100da6101ac565b60408051918252519081900360200190f35b6100da6101b1565b6100da6101b7565b6101196004803603602081101561011257600080fd5b50356101bf565b005b6100da61037d565b61012b610385565b604080519115158252519081900360200190f35b6100b661038e565b610119610394565b61016c6004803603602081101561016557600080fd5b503561044e565b604080519384526020840192909252151582820152519081900360600190f35b6100b6610471565b737f57388a12d4ed6b5f9ed39ba200be465fc3010a81565b600381565b60025481565b6305a39a8081565b33737f57388a12d4ed6b5f9ed39ba200be465fc3010a146102115760405162461bcd60e51b815260040180806020018281038252602381526020018061071b6023913960400191505060405180910390fd5b6102196106b3565b5060008181526001602081815260409283902083516060810185528154815292810154918301919091526002015460ff1615801592820192909252906102905760405162461bcd60e51b81526004018080602001828103825260238152602001806106d76023913960400191505060405180910390fd5b805142116102e5576040805162461bcd60e51b815260206004820152601960248201527f5a79785465616d4c6f636b3a204e6f742074696d652079657400000000000000604482015290519081900360640190fd5b600081602001511161033e576040805162461bcd60e51b815260206004820152601d60248201527f5a79785465616d4c6f636b3a204e6f7468696e6720746f20636c61696d000000604482015290519081900360640190fd5b600160408083019190915260208201519051339180156108fc02916000818181858888f19350505050158015610378573d6000803e3d6000fd5b505050565b6301e1338081565b60005460ff1681565b61100181565b47600281905563617c38f860006103b283600363ffffffff61047716565b905060005b600381101561043a57600181810160008181526020929092526040909120906103fb906103ee906301e1338063ffffffff6104c216565b859063ffffffff61051b16565b8155600180820184905582016003141561041f57600101939093555061044c915050565b61042f858463ffffffff61057516565b9450506001016103b7565b50506000805460ff1916600117905550505b565b600160208190526000918252604090912080549181015460029091015460ff1683565b61100081565b60006104b983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506105b7565b90505b92915050565b6000826104d1575060006104bc565b828202828482816104de57fe5b04146104b95760405162461bcd60e51b81526004018080602001828103825260218152602001806106fa6021913960400191505060405180910390fd5b6000828201838110156104b9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006104b983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610659565b600081836106435760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106085781810151838201526020016105f0565b50505050905090810190601f1680156106355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161064f57fe5b0495945050505050565b600081848411156106ab5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106085781810151838201526020016105f0565b505050900390565b60405180606001604052806000815260200160008152602001600015158152509056fe5a79785465616d4c6f636b3a2052657761726420616c726561647920636c61696d6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77746865206d73672073656e646572206d75737420626520746f6b656e4d616e61676572a26469706673582212200ee66bab6e4d2dab28511d36af4b355c99c21562186b220bcf80f4756f3710ed64736f6c63430006040033",
			},
		},
	}

}

func UpgradeBuildInSystemContract(config *params.ChainConfig, blockNumber *big.Int, statedb *state.StateDB) {
	if config == nil || blockNumber == nil || statedb == nil {
		return
	}
	var network string
	switch GenesisHash {
	/* Add mainnet genesis hash */
	case params.MainnetGenesisHash:
		network = mainNet
	case params.MinervaGenesisHash:
		network = minervaNet
	default:
		network = mainNet
	}

	logger := log.New("system-contract-upgrade", network)
	//if config.IsOnNiels(blockNumber) {
	//	applySystemContractUpgrade(nielsUpgrade[network], blockNumber, statedb, logger)
	//}
	//
	//if config.IsOnMirrorSync(blockNumber) {
	//	applySystemContractUpgrade(mirrorUpgrade[network], blockNumber, statedb, logger)
	//}

	if config.IsOnReleaseBlock(blockNumber) {
		applySystemContractUpgrade(releaseUpgrade[network], blockNumber, statedb, logger)
	}

	/*
		apply other upgrades
	*/
}

func applySystemContractUpgrade(upgrade *Upgrade, blockNumber *big.Int, statedb *state.StateDB, logger log.Logger) {
	if upgrade == nil {
		logger.Info("Empty upgrade config", "height", blockNumber.String())
		return
	}

	logger.Info(fmt.Sprintf("Apply upgrade %s at height %d", upgrade.UpgradeName, blockNumber.Int64()))
	for _, cfg := range upgrade.Configs {
		logger.Info(fmt.Sprintf("Upgrade contract %s to commit %s", cfg.ContractAddr.String(), cfg.CommitUrl))

		if cfg.BeforeUpgrade != nil {
			err := cfg.BeforeUpgrade(blockNumber, cfg.ContractAddr, statedb)
			if err != nil {
				panic(fmt.Errorf("contract address: %s, execute beforeUpgrade error: %s", cfg.ContractAddr.String(), err.Error()))
			}
		}

		newContractCode, err := hex.DecodeString(cfg.Code)
		if err != nil {
			panic(fmt.Errorf("failed to decode new contract code: %s", err.Error()))
		}
		statedb.SetCode(cfg.ContractAddr, newContractCode)

		if cfg.AfterUpgrade != nil {
			err := cfg.AfterUpgrade(blockNumber, cfg.ContractAddr, statedb)
			if err != nil {
				panic(fmt.Errorf("contract address: %s, execute afterUpgrade error: %s", cfg.ContractAddr.String(), err.Error()))
			}
		}
	}
}
